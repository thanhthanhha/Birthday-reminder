[{"C:\\Users\\Asus\\Documents\\GitHub\\Birthday-reminder\\birthday-reminder\\src\\index.js":"1","C:\\Users\\Asus\\Documents\\GitHub\\Birthday-reminder\\birthday-reminder\\src\\reportWebVitals.js":"2","C:\\Users\\Asus\\Documents\\GitHub\\Birthday-reminder\\birthday-reminder\\src\\component\\birthday.js":"3"},{"size":538,"mtime":1609336963031,"results":"4","hashOfConfig":"5"},{"size":375,"mtime":1608647606203,"results":"6","hashOfConfig":"5"},{"size":3582,"mtime":1613294954391,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"80ces6",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"C:\\Users\\Asus\\Documents\\GitHub\\Birthday-reminder\\birthday-reminder\\src\\index.js",[],["16","17"],"C:\\Users\\Asus\\Documents\\GitHub\\Birthday-reminder\\birthday-reminder\\src\\reportWebVitals.js",[],"C:\\Users\\Asus\\Documents\\GitHub\\Birthday-reminder\\birthday-reminder\\src\\component\\birthday.js",["18","19","20","21"],"import { Helmet } from \"react-helmet\";\r\nimport peopledata from \"../data.json\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useTransition, animated, useSpring } from \"react-spring\";\r\n//import WebWorker from \"../worker\";\r\n//import WebWorkerEnabler from \"../webWorkerEnabler\";\r\n//const workerInstance = new WebWorkerEnabler(WebWorker);\r\nconst Birthday = () => {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Birthday Reminder</title>\r\n        <link rel=\"icon\" href=\"../icon.png\" />\r\n      </Helmet>\r\n      <Person></Person>\r\n    </>\r\n  );\r\n};\r\nconst PersonList = () => {\r\n  //set State\r\n\r\n  const [people, setPeople] = useState(peopledata.people);\r\n  // setPeople((prevState) => {\r\n  //   let newpeople = peopledata.people.filter((item) => {\r\n  //     let date = new Date(item.birthday);\r\n  //     let now = new Date();\r\n  //     if (\r\n  //       date.getDate() === now.getDate() &&\r\n  //       date.getMonth() === now.getMonth()\r\n  //     ) {\r\n  //       return true;\r\n  //     }\r\n  //     return false;\r\n  //   });\r\n  //   return newpeople;\r\n  // });\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setPeople((prevState) => {\r\n        let newpeople = prevState.filter((item) => {\r\n          let date = new Date(item.birthday);\r\n          let now = new Date();\r\n          if (\r\n            date.getDate() === now.getDate() &&\r\n            date.getMonth() === now.getMonth()\r\n          ) {\r\n            return true;\r\n          }\r\n          return false;\r\n        });\r\n        return newpeople;\r\n      });\r\n    }, 1000);\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  //transition\r\n  const transitions = useTransition(people, (item) => item.id, {\r\n    enter: { transform: \"translateX(0rem)\", opacity: 1 },\r\n    leave: { transform: \"translateX(-20rem)\", opacity: 0 },\r\n    config: { duration: 500 },\r\n  });\r\n  console.log(transitions);\r\n  var dismissNotif = (userId) => {\r\n    setPeople((prevState) => {\r\n      let newpeople = prevState.filter((item) => item.id != userId);\r\n\r\n      console.log(\"the prev \" + newpeople);\r\n      return newpeople;\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"bigContain\">\r\n        <div>\r\n          {transitions.map(({ item, key, props }) => (\r\n            <React.Fragment key={item.id}>\r\n              <animated.div className=\"container\" style={props}>\r\n                <img src={item.img} width=\"50\" className=\"avatar\" />\r\n                <span>{item.name}</span>\r\n                <span>{item.birthday}</span>\r\n                <button\r\n                  onClick={() => {\r\n                    dismissNotif(item.id);\r\n                  }}\r\n                >\r\n                  DISMISS\r\n                </button>\r\n                <span></span>\r\n              </animated.div>\r\n            </React.Fragment>\r\n          ))}\r\n        </div>\r\n        <div className=\"header\">\r\n          <div>\r\n            <div>\r\n              Birthday\r\n              <br></br>Reminder\r\n              <span id=\"red\">\r\n                Birthday\r\n                <br></br>Reminder\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nclass Person extends React.Component {\r\n  // componentDidMount() {\r\n  //   workerInstance.addEventListener(\r\n  //     \"message\",\r\n  //     (e) => {\r\n  //       console.log(\"Received response:\");\r\n  //       console.log(e.data);\r\n  //     },\r\n  //     false\r\n  //   );\r\n  // }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return <PersonList></PersonList>;\r\n  }\r\n}\r\nexport default Birthday;\r\n",{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","severity":1,"message":"27","line":4,"column":35,"nodeType":"28","messageId":"29","endLine":4,"endColumn":44},{"ruleId":"30","severity":1,"message":"31","line":66,"column":58,"nodeType":"32","messageId":"33","endLine":66,"endColumn":60},{"ruleId":"34","severity":1,"message":"35","line":79,"column":17,"nodeType":"36","endLine":79,"endColumn":69},{"ruleId":"37","severity":1,"message":"38","line":122,"column":3,"nodeType":"39","messageId":"40","endLine":124,"endColumn":4},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-unused-vars","'useSpring' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]